// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/eXiSoundVisPrivatePCH.h"
#include "eXiSoundVis.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeeXiSoundVis() {}
class UScriptStruct* FSoundVisData::StaticStruct()
{
	extern EXISOUNDVIS_API class UPackage* Z_Construct_UPackage__Script_eXiSoundVis();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern EXISOUNDVIS_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundVisData();
		extern EXISOUNDVIS_API uint32 Get_Z_Construct_UScriptStruct_FSoundVisData_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSoundVisData, Z_Construct_UPackage__Script_eXiSoundVis(), TEXT("SoundVisData"), sizeof(FSoundVisData), Get_Z_Construct_UScriptStruct_FSoundVisData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSoundVisData(FSoundVisData::StaticStruct, TEXT("/Script/eXiSoundVis"), TEXT("SoundVisData"), false, nullptr, nullptr);
static struct FScriptStruct_eXiSoundVis_StaticRegisterNativesFSoundVisData
{
	FScriptStruct_eXiSoundVis_StaticRegisterNativesFSoundVisData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SoundVisData")),new UScriptStruct::TCppStructOps<FSoundVisData>);
	}
} ScriptStruct_eXiSoundVis_StaticRegisterNativesFSoundVisData;
	void USoundVisComponent::StaticRegisterNativesUSoundVisComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(USoundVisComponent::StaticClass(), "BP_CalculateFrequencySpectrum",(Native)&USoundVisComponent::execBP_CalculateFrequencySpectrum);
		FNativeFunctionRegistrar::RegisterFunction(USoundVisComponent::StaticClass(), "BP_GetAverageBassValue",(Native)&USoundVisComponent::execBP_GetAverageBassValue);
		FNativeFunctionRegistrar::RegisterFunction(USoundVisComponent::StaticClass(), "BP_GetAverageFrequencyValueInRange",(Native)&USoundVisComponent::execBP_GetAverageFrequencyValueInRange);
		FNativeFunctionRegistrar::RegisterFunction(USoundVisComponent::StaticClass(), "BP_GetAverageSubBassValue",(Native)&USoundVisComponent::execBP_GetAverageSubBassValue);
		FNativeFunctionRegistrar::RegisterFunction(USoundVisComponent::StaticClass(), "BP_GetSpecificFrequencyValue",(Native)&USoundVisComponent::execBP_GetSpecificFrequencyValue);
		FNativeFunctionRegistrar::RegisterFunction(USoundVisComponent::StaticClass(), "BP_LoadAllSoundFileNamesFromHD",(Native)&USoundVisComponent::execBP_LoadAllSoundFileNamesFromHD);
		FNativeFunctionRegistrar::RegisterFunction(USoundVisComponent::StaticClass(), "BP_LoadSoundFileFromHD",(Native)&USoundVisComponent::execBP_LoadSoundFileFromHD);
		FNativeFunctionRegistrar::RegisterFunction(USoundVisComponent::StaticClass(), "BP_PauseCalculatingFrequencySpectrum",(Native)&USoundVisComponent::execBP_PauseCalculatingFrequencySpectrum);
		FNativeFunctionRegistrar::RegisterFunction(USoundVisComponent::StaticClass(), "BP_ResumeCalculatingFrequencySpectrum",(Native)&USoundVisComponent::execBP_ResumeCalculatingFrequencySpectrum);
		FNativeFunctionRegistrar::RegisterFunction(USoundVisComponent::StaticClass(), "BP_StartCalculatingFrequencySpectrum",(Native)&USoundVisComponent::execBP_StartCalculatingFrequencySpectrum);
		FNativeFunctionRegistrar::RegisterFunction(USoundVisComponent::StaticClass(), "BP_StopCalculatingFrequencySpectrum",(Native)&USoundVisComponent::execBP_StopCalculatingFrequencySpectrum);
		FNativeFunctionRegistrar::RegisterFunction(USoundVisComponent::StaticClass(), "GetCurrentPlayBackTime",(Native)&USoundVisComponent::execGetCurrentPlayBackTime);
		FNativeFunctionRegistrar::RegisterFunction(USoundVisComponent::StaticClass(), "HandleFrequencySpectrumCalculation",(Native)&USoundVisComponent::execHandleFrequencySpectrumCalculation);
		FNativeFunctionRegistrar::RegisterFunction(USoundVisComponent::StaticClass(), "IsPlayerPaused",(Native)&USoundVisComponent::execIsPlayerPaused);
		FNativeFunctionRegistrar::RegisterFunction(USoundVisComponent::StaticClass(), "IsPlayerPlaying",(Native)&USoundVisComponent::execIsPlayerPlaying);
	}
	IMPLEMENT_CLASS(USoundVisComponent, 280372527);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_USoundWave_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FTimerHandle();
	ENGINE_API class UClass* Z_Construct_UClass_UAudioComponent_NoRegister();

	EXISOUNDVIS_API class UFunction* Z_Construct_UDelegateFunction_eXiSoundVis_FrequencySpectrumCalculated__DelegateSignature();
	EXISOUNDVIS_API class UFunction* Z_Construct_UDelegateFunction_eXiSoundVis_WorkerFinished__DelegateSignature();
	EXISOUNDVIS_API class UFunction* Z_Construct_UDelegateFunction_eXiSoundVis_FileLoadCompleted__DelegateSignature();
	EXISOUNDVIS_API class UScriptStruct* Z_Construct_UScriptStruct_FSoundVisData();
	EXISOUNDVIS_API class UFunction* Z_Construct_UFunction_USoundVisComponent_BP_CalculateFrequencySpectrum();
	EXISOUNDVIS_API class UFunction* Z_Construct_UFunction_USoundVisComponent_BP_GetAverageBassValue();
	EXISOUNDVIS_API class UFunction* Z_Construct_UFunction_USoundVisComponent_BP_GetAverageFrequencyValueInRange();
	EXISOUNDVIS_API class UFunction* Z_Construct_UFunction_USoundVisComponent_BP_GetAverageSubBassValue();
	EXISOUNDVIS_API class UFunction* Z_Construct_UFunction_USoundVisComponent_BP_GetSpecificFrequencyValue();
	EXISOUNDVIS_API class UFunction* Z_Construct_UFunction_USoundVisComponent_BP_LoadAllSoundFileNamesFromHD();
	EXISOUNDVIS_API class UFunction* Z_Construct_UFunction_USoundVisComponent_BP_LoadSoundFileFromHD();
	EXISOUNDVIS_API class UFunction* Z_Construct_UFunction_USoundVisComponent_BP_PauseCalculatingFrequencySpectrum();
	EXISOUNDVIS_API class UFunction* Z_Construct_UFunction_USoundVisComponent_BP_ResumeCalculatingFrequencySpectrum();
	EXISOUNDVIS_API class UFunction* Z_Construct_UFunction_USoundVisComponent_BP_StartCalculatingFrequencySpectrum();
	EXISOUNDVIS_API class UFunction* Z_Construct_UFunction_USoundVisComponent_BP_StopCalculatingFrequencySpectrum();
	EXISOUNDVIS_API class UFunction* Z_Construct_UFunction_USoundVisComponent_GetCurrentPlayBackTime();
	EXISOUNDVIS_API class UFunction* Z_Construct_UFunction_USoundVisComponent_HandleFrequencySpectrumCalculation();
	EXISOUNDVIS_API class UFunction* Z_Construct_UFunction_USoundVisComponent_IsPlayerPaused();
	EXISOUNDVIS_API class UFunction* Z_Construct_UFunction_USoundVisComponent_IsPlayerPlaying();
	EXISOUNDVIS_API class UClass* Z_Construct_UClass_USoundVisComponent_NoRegister();
	EXISOUNDVIS_API class UClass* Z_Construct_UClass_USoundVisComponent();
	EXISOUNDVIS_API class UPackage* Z_Construct_UPackage__Script_eXiSoundVis();
	UFunction* Z_Construct_UDelegateFunction_eXiSoundVis_FrequencySpectrumCalculated__DelegateSignature()
	{
		struct _Script_eXiSoundVis_eventFrequencySpectrumCalculated_Parms
		{
			TArray<float> OutFrequencies;
		};
		UObject* Outer=Z_Construct_UPackage__Script_eXiSoundVis();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FrequencySpectrumCalculated__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_eXiSoundVis_eventFrequencySpectrumCalculated_Parms));
			UProperty* NewProp_OutFrequencies = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutFrequencies"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(OutFrequencies, _Script_eXiSoundVis_eventFrequencySpectrumCalculated_Parms), 0x0010000008000182);
			UProperty* NewProp_OutFrequencies_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutFrequencies, TEXT("OutFrequencies"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Delegate that passes FrequencyValues"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_eXiSoundVis_WorkerFinished__DelegateSignature()
	{
		struct _Script_eXiSoundVis_eventWorkerFinished_Parms
		{
			USoundWave* SoundWaveRef;
		};
		UObject* Outer=Z_Construct_UPackage__Script_eXiSoundVis();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("WorkerFinished__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_eXiSoundVis_eventWorkerFinished_Parms));
			UProperty* NewProp_SoundWaveRef = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SoundWaveRef"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SoundWaveRef, _Script_eXiSoundVis_eventWorkerFinished_Parms), 0x0010000000000080, Z_Construct_UClass_USoundWave_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Delegate used by the Worker"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_eXiSoundVis_FileLoadCompleted__DelegateSignature()
	{
		struct _Script_eXiSoundVis_eventFileLoadCompleted_Parms
		{
			USoundWave* SoundWaveRef;
		};
		UObject* Outer=Z_Construct_UPackage__Script_eXiSoundVis();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("FileLoadCompleted__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_eXiSoundVis_eventFileLoadCompleted_Parms));
			UProperty* NewProp_SoundWaveRef = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SoundWaveRef"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SoundWaveRef, _Script_eXiSoundVis_eventFileLoadCompleted_Parms), 0x0010000000000080, Z_Construct_UClass_USoundWave_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Delegate that passes FSoundVisData"));
#endif
		}
		return ReturnFunction;
	}
	UScriptStruct* Z_Construct_UScriptStruct_FSoundVisData()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_eXiSoundVis();
		extern uint32 Get_Z_Construct_UScriptStruct_FSoundVisData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("SoundVisData"), sizeof(FSoundVisData), Get_Z_Construct_UScriptStruct_FSoundVisData_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SoundVisData"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSoundVisData>, EStructFlags(0x00000001));
			UProperty* NewProp_SoundWaveRef = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SoundWaveRef"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SoundWaveRef, FSoundVisData), 0x0010000000000014, Z_Construct_UClass_USoundWave_NoRegister());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("IsBlueprintBase"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(NewProp_SoundWaveRef, TEXT("Category"), TEXT("eXiSoundVis | Sounds"));
			MetaData->SetValue(NewProp_SoundWaveRef, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSoundVisData_CRC() { return 1830463974U; }
	UFunction* Z_Construct_UFunction_USoundVisComponent_BP_CalculateFrequencySpectrum()
	{
		struct SoundVisComponent_eventBP_CalculateFrequencySpectrum_Parms
		{
			USoundWave* InSoundWaveRef;
			float InStartTime;
			float InDuration;
			TArray<float> OutFrequencies;
		};
		UObject* Outer=Z_Construct_UClass_USoundVisComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_CalculateFrequencySpectrum"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(SoundVisComponent_eventBP_CalculateFrequencySpectrum_Parms));
			UProperty* NewProp_OutFrequencies = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutFrequencies"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(OutFrequencies, SoundVisComponent_eventBP_CalculateFrequencySpectrum_Parms), 0x0010000000000180);
			UProperty* NewProp_OutFrequencies_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutFrequencies, TEXT("OutFrequencies"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_InDuration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InDuration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InDuration, SoundVisComponent_eventBP_CalculateFrequencySpectrum_Parms), 0x0010000000000082);
			UProperty* NewProp_InStartTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InStartTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InStartTime, SoundVisComponent_eventBP_CalculateFrequencySpectrum_Parms), 0x0010000000000082);
			UProperty* NewProp_InSoundWaveRef = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSoundWaveRef"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(InSoundWaveRef, SoundVisComponent_eventBP_CalculateFrequencySpectrum_Parms), 0x0010000000000080, Z_Construct_UClass_USoundWave_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SoundVis | Frequency Spectrum"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Calculate Freq Spectrum"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Will call the CalculateFrequencySpectrum function from BP Side\n\n@param        InSoundWave             SoundWave that gets analyzed\n@param        InStartTime             The StartPoint of the TimeWindow we want to analyze\n@param        InDuration              The length of the TimeWindow we want to analyze\n@param        OutFrequencies  Array of float values for x Frequencies from 0 to 22000"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USoundVisComponent_BP_GetAverageBassValue()
	{
		struct SoundVisComponent_eventBP_GetAverageBassValue_Parms
		{
			USoundWave* InSoundWave;
			TArray<float> InFrequencies;
			float OutAverageBass;
		};
		UObject* Outer=Z_Construct_UClass_USoundVisComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_GetAverageBassValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SoundVisComponent_eventBP_GetAverageBassValue_Parms));
			UProperty* NewProp_OutAverageBass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutAverageBass"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(OutAverageBass, SoundVisComponent_eventBP_GetAverageBassValue_Parms), 0x0010000000000180);
			UProperty* NewProp_InFrequencies = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InFrequencies"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(InFrequencies, SoundVisComponent_eventBP_GetAverageBassValue_Parms), 0x0010000000000080);
			UProperty* NewProp_InFrequencies_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InFrequencies, TEXT("InFrequencies"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_InSoundWave = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSoundWave"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(InSoundWave, SoundVisComponent_eventBP_GetAverageBassValue_Parms), 0x0010000000000080, Z_Construct_UClass_USoundWave_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SoundVis | Frequency Values"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Average Bass Value"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("This function will return the average value for Bass (60 to 250hz)\n\n@param        InSoundWave             SoundWave to get specific data from (SampleRate)\n@param        InFrequencies   Array of float values for different frequencies from 0 to 22000. Can be get by using the \"BP_CalculateFrequencySpectrum\" function\n@param        OutAverageBass  Average value of the frequencies from 60 to 250"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USoundVisComponent_BP_GetAverageFrequencyValueInRange()
	{
		struct SoundVisComponent_eventBP_GetAverageFrequencyValueInRange_Parms
		{
			USoundWave* InSoundWave;
			TArray<float> InFrequencies;
			int32 InStartFrequence;
			int32 InEndFrequence;
			float OutAverageFrequency;
		};
		UObject* Outer=Z_Construct_UClass_USoundVisComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_GetAverageFrequencyValueInRange"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SoundVisComponent_eventBP_GetAverageFrequencyValueInRange_Parms));
			UProperty* NewProp_OutAverageFrequency = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutAverageFrequency"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(OutAverageFrequency, SoundVisComponent_eventBP_GetAverageFrequencyValueInRange_Parms), 0x0010000000000180);
			UProperty* NewProp_InEndFrequence = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InEndFrequence"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InEndFrequence, SoundVisComponent_eventBP_GetAverageFrequencyValueInRange_Parms), 0x0010000000000080);
			UProperty* NewProp_InStartFrequence = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InStartFrequence"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InStartFrequence, SoundVisComponent_eventBP_GetAverageFrequencyValueInRange_Parms), 0x0010000000000080);
			UProperty* NewProp_InFrequencies = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InFrequencies"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(InFrequencies, SoundVisComponent_eventBP_GetAverageFrequencyValueInRange_Parms), 0x0010000000000080);
			UProperty* NewProp_InFrequencies_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InFrequencies, TEXT("InFrequencies"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_InSoundWave = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSoundWave"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(InSoundWave, SoundVisComponent_eventBP_GetAverageFrequencyValueInRange_Parms), 0x0010000000000080, Z_Construct_UClass_USoundWave_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SoundVis | Frequency Values"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Average Freq Value In Range"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("This function will return the average value for a given frequency interval e.g.: 20 to 60 (SubBass)\n\n@param        InSoundWave                     SoundWave to get specific data from (SampleRate)\n@param        InFrequencies           Array of float values for different frequencies from 0 to 22000. Can be get by using the \"BP_CalculateFrequencySpectrum\" function\n@param        InStartFrequency                Start Frequency of the Frequency interval\n@param        InEndFrequency          End Frequency of the Frequency interval\n@param        OutAverageFrequency     Average value of the requested frequency interval"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USoundVisComponent_BP_GetAverageSubBassValue()
	{
		struct SoundVisComponent_eventBP_GetAverageSubBassValue_Parms
		{
			USoundWave* InSoundWave;
			TArray<float> InFrequencies;
			float OutAverageSubBass;
		};
		UObject* Outer=Z_Construct_UClass_USoundVisComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_GetAverageSubBassValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SoundVisComponent_eventBP_GetAverageSubBassValue_Parms));
			UProperty* NewProp_OutAverageSubBass = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutAverageSubBass"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(OutAverageSubBass, SoundVisComponent_eventBP_GetAverageSubBassValue_Parms), 0x0010000000000180);
			UProperty* NewProp_InFrequencies = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InFrequencies"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(InFrequencies, SoundVisComponent_eventBP_GetAverageSubBassValue_Parms), 0x0010000000000080);
			UProperty* NewProp_InFrequencies_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InFrequencies, TEXT("InFrequencies"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_InSoundWave = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSoundWave"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(InSoundWave, SoundVisComponent_eventBP_GetAverageSubBassValue_Parms), 0x0010000000000080, Z_Construct_UClass_USoundWave_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SoundVis | Frequency Values"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Average Subbass Value"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("This function will return the average value for SubBass (20 to 60hz)\n\n@param        InSoundWave             SoundWave to get specific data from (SampleRate)\n@param        InFrequencies   Array of float values for different frequencies from 0 to 22000. Can be get by using the \"BP_CalculateFrequencySpectrum\" function\n@param        OutAverageSubBass Average value of the frequencies from 20 to 60"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USoundVisComponent_BP_GetSpecificFrequencyValue()
	{
		struct SoundVisComponent_eventBP_GetSpecificFrequencyValue_Parms
		{
			USoundWave* InSoundWave;
			TArray<float> InFrequencies;
			int32 InWantedFrequency;
			float OutFrequencyValue;
		};
		UObject* Outer=Z_Construct_UClass_USoundVisComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_GetSpecificFrequencyValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14422401, 65535, sizeof(SoundVisComponent_eventBP_GetSpecificFrequencyValue_Parms));
			UProperty* NewProp_OutFrequencyValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutFrequencyValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(OutFrequencyValue, SoundVisComponent_eventBP_GetSpecificFrequencyValue_Parms), 0x0010000000000180);
			UProperty* NewProp_InWantedFrequency = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InWantedFrequency"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(InWantedFrequency, SoundVisComponent_eventBP_GetSpecificFrequencyValue_Parms), 0x0010000000000080);
			UProperty* NewProp_InFrequencies = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InFrequencies"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(InFrequencies, SoundVisComponent_eventBP_GetSpecificFrequencyValue_Parms), 0x0010000000000080);
			UProperty* NewProp_InFrequencies_Inner = new(EC_InternalUseOnlyConstructor, NewProp_InFrequencies, TEXT("InFrequencies"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_InSoundWave = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSoundWave"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(InSoundWave, SoundVisComponent_eventBP_GetSpecificFrequencyValue_Parms), 0x0010000000000080, Z_Construct_UClass_USoundWave_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SoundVis | Frequency Values"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Freq Value"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("This function will return the value of a specific frequency. It's needs a Frequency Array from the \"BP_CalculateFrequencySpectrum\" function and the matching SoundWave\n\n@param        InSoundWave                     SoundWave to get specific data from (SampleRate)\n@param        InFrequencies           Array of float values for different frequencies from 0 to 22000. Can be get by using the \"BP_CalculateFrequencySpectrum\" function\n@param        InWantedFrequency       The Frequency of which you want the value of\n@param        OutFrequencyValue       Float value of the requested frequency"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USoundVisComponent_BP_LoadAllSoundFileNamesFromHD()
	{
		struct SoundVisComponent_eventBP_LoadAllSoundFileNamesFromHD_Parms
		{
			bool bLoaded;
			FString InDirectoryPath;
			bool bInAbsolutePath;
			FString InFileExtension;
			TArray<FString> OutSoundFileNamesWithPath;
			TArray<FString> OutSoundFileNamesWithoutPath;
		};
		UObject* Outer=Z_Construct_UClass_USoundVisComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_LoadAllSoundFileNamesFromHD"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04420401, 65535, sizeof(SoundVisComponent_eventBP_LoadAllSoundFileNamesFromHD_Parms));
			UProperty* NewProp_OutSoundFileNamesWithoutPath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutSoundFileNamesWithoutPath"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(OutSoundFileNamesWithoutPath, SoundVisComponent_eventBP_LoadAllSoundFileNamesFromHD_Parms), 0x0010000000000180);
			UProperty* NewProp_OutSoundFileNamesWithoutPath_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutSoundFileNamesWithoutPath, TEXT("OutSoundFileNamesWithoutPath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_OutSoundFileNamesWithPath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OutSoundFileNamesWithPath"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(OutSoundFileNamesWithPath, SoundVisComponent_eventBP_LoadAllSoundFileNamesFromHD_Parms), 0x0010000000000180);
			UProperty* NewProp_OutSoundFileNamesWithPath_Inner = new(EC_InternalUseOnlyConstructor, NewProp_OutSoundFileNamesWithPath, TEXT("OutSoundFileNamesWithPath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_InFileExtension = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InFileExtension"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(InFileExtension, SoundVisComponent_eventBP_LoadAllSoundFileNamesFromHD_Parms), 0x0010000000000082);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInAbsolutePath, SoundVisComponent_eventBP_LoadAllSoundFileNamesFromHD_Parms, bool);
			UProperty* NewProp_bInAbsolutePath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bInAbsolutePath"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInAbsolutePath, SoundVisComponent_eventBP_LoadAllSoundFileNamesFromHD_Parms), 0x0010000000000082, CPP_BOOL_PROPERTY_BITMASK(bInAbsolutePath, SoundVisComponent_eventBP_LoadAllSoundFileNamesFromHD_Parms), sizeof(bool), true);
			UProperty* NewProp_InDirectoryPath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InDirectoryPath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(InDirectoryPath, SoundVisComponent_eventBP_LoadAllSoundFileNamesFromHD_Parms), 0x0010000000000082);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bLoaded, SoundVisComponent_eventBP_LoadAllSoundFileNamesFromHD_Parms, bool);
			UProperty* NewProp_bLoaded = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bLoaded"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bLoaded, SoundVisComponent_eventBP_LoadAllSoundFileNamesFromHD_Parms), 0x0010000000000180, CPP_BOOL_PROPERTY_BITMASK(bLoaded, SoundVisComponent_eventBP_LoadAllSoundFileNamesFromHD_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SoundVis | SoundFile"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Load Sound File Names"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Will get an Array of Names of the Found SoundFiles\n\n@param        InDirectoryPath                                 Path to the Directory in which the Files are (absolute/relative)\n@param        bInAbsolutePath                                 Tells if the DirectoryPath is absolute (C:/..) or relative to the GameDirectory\n@param        InFileExtension                                 This is the Extension the Function should look for. For the Plugin it should be .ogg\n@param        OutSoundFileNamesWithPath               The Array of found SoundFileNames (full Path/Name.Extension)\n@param        OutSoundFileNamesWithoutPath    The Array of found SoundFileNames (only Name.Extension)"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USoundVisComponent_BP_LoadSoundFileFromHD()
	{
		struct SoundVisComponent_eventBP_LoadSoundFileFromHD_Parms
		{
			FString InFilePath;
		};
		UObject* Outer=Z_Construct_UClass_USoundVisComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_LoadSoundFileFromHD"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SoundVisComponent_eventBP_LoadSoundFileFromHD_Parms));
			UProperty* NewProp_InFilePath = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InFilePath"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(InFilePath, SoundVisComponent_eventBP_LoadSoundFileFromHD_Parms), 0x0010000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SoundVis | SoundFile"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Load Sound File"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Will load a file (currently .ogg) from your Hard-Drive and save it in a USoundWave variable\n\n@param        InFilePath      Absolute path to the File. E.g.: \"C:/Sounds/File.ogg\""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USoundVisComponent_BP_PauseCalculatingFrequencySpectrum()
	{
		UObject* Outer=Z_Construct_UClass_USoundVisComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_PauseCalculatingFrequencySpectrum"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SoundVis | Frequency Spectrum"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Pause Calculate Freq Spectrum"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("If playing, pauses the current playing USoundWave and FrequencySpectrum calculation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USoundVisComponent_BP_ResumeCalculatingFrequencySpectrum()
	{
		UObject* Outer=Z_Construct_UClass_USoundVisComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_ResumeCalculatingFrequencySpectrum"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SoundVis | Frequency Spectrum"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Resume Calculate Freq Spectrum"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("If paused, resumes the current USoundWave and FrequencySpectrum calculation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USoundVisComponent_BP_StartCalculatingFrequencySpectrum()
	{
		struct SoundVisComponent_eventBP_StartCalculatingFrequencySpectrum_Parms
		{
			USoundWave* InSoundWaveRef;
			float InSegmentLength;
		};
		UObject* Outer=Z_Construct_UClass_USoundVisComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_StartCalculatingFrequencySpectrum"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SoundVisComponent_eventBP_StartCalculatingFrequencySpectrum_Parms));
			UProperty* NewProp_InSegmentLength = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSegmentLength"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InSegmentLength, SoundVisComponent_eventBP_StartCalculatingFrequencySpectrum_Parms), 0x0010000000000082);
			UProperty* NewProp_InSoundWaveRef = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InSoundWaveRef"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(InSoundWaveRef, SoundVisComponent_eventBP_StartCalculatingFrequencySpectrum_Parms), 0x0010000000000080, Z_Construct_UClass_USoundWave_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SoundVis | Frequency Spectrum"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Start Calculate Freq Spectrum"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Will play the passed USoundWave and also start calculating the FrequencySpectrum (loops over the InSegmentLength sized parts)\n\n@param        InSoundWaveRef  SoundWave that gets started and analyzed\n@param        InSegmentLength Length of the SoundWave segment that should get analyzed"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USoundVisComponent_BP_StopCalculatingFrequencySpectrum()
	{
		UObject* Outer=Z_Construct_UClass_USoundVisComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BP_StopCalculatingFrequencySpectrum"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SoundVis | Frequency Spectrum"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Stop Calculate Freq Spectrum"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("If playing or paused, stops the current USoundWave and FrequencySpectrum calculation"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USoundVisComponent_GetCurrentPlayBackTime()
	{
		struct SoundVisComponent_eventGetCurrentPlayBackTime_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USoundVisComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCurrentPlayBackTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(SoundVisComponent_eventGetCurrentPlayBackTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, SoundVisComponent_eventGetCurrentPlayBackTime_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SoundVis | SoundPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Get Current Playback Time"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Return the current PlayBack Time of the Sound Player Timer\n\n@return Current PlayBack Time"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USoundVisComponent_HandleFrequencySpectrumCalculation()
	{
		UObject* Outer=Z_Construct_UClass_USoundVisComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("HandleFrequencySpectrumCalculation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Function that is looped to handle the calculation of the FrequencySpectrum"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USoundVisComponent_IsPlayerPaused()
	{
		struct SoundVisComponent_eventIsPlayerPaused_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USoundVisComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsPlayerPaused"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(SoundVisComponent_eventIsPlayerPaused_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SoundVisComponent_eventIsPlayerPaused_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SoundVisComponent_eventIsPlayerPaused_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SoundVisComponent_eventIsPlayerPaused_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SoundVis | SoundPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Is Player Paused"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns if the Player is currently paused or not\n\n@return True if paused"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USoundVisComponent_IsPlayerPlaying()
	{
		struct SoundVisComponent_eventIsPlayerPlaying_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USoundVisComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsPlayerPlaying"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14020401, 65535, sizeof(SoundVisComponent_eventIsPlayerPlaying_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SoundVisComponent_eventIsPlayerPlaying_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SoundVisComponent_eventIsPlayerPlaying_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SoundVisComponent_eventIsPlayerPlaying_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("SoundVis | SoundPlayer"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Is Player Playing"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns if the Player is currently playing or not\n\n@return True if playing"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USoundVisComponent_NoRegister()
	{
		return USoundVisComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_USoundVisComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage__Script_eXiSoundVis();
			OuterClass = USoundVisComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A00080;

				OuterClass->LinkChild(Z_Construct_UFunction_USoundVisComponent_BP_CalculateFrequencySpectrum());
				OuterClass->LinkChild(Z_Construct_UFunction_USoundVisComponent_BP_GetAverageBassValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USoundVisComponent_BP_GetAverageFrequencyValueInRange());
				OuterClass->LinkChild(Z_Construct_UFunction_USoundVisComponent_BP_GetAverageSubBassValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USoundVisComponent_BP_GetSpecificFrequencyValue());
				OuterClass->LinkChild(Z_Construct_UFunction_USoundVisComponent_BP_LoadAllSoundFileNamesFromHD());
				OuterClass->LinkChild(Z_Construct_UFunction_USoundVisComponent_BP_LoadSoundFileFromHD());
				OuterClass->LinkChild(Z_Construct_UFunction_USoundVisComponent_BP_PauseCalculatingFrequencySpectrum());
				OuterClass->LinkChild(Z_Construct_UFunction_USoundVisComponent_BP_ResumeCalculatingFrequencySpectrum());
				OuterClass->LinkChild(Z_Construct_UFunction_USoundVisComponent_BP_StartCalculatingFrequencySpectrum());
				OuterClass->LinkChild(Z_Construct_UFunction_USoundVisComponent_BP_StopCalculatingFrequencySpectrum());
				OuterClass->LinkChild(Z_Construct_UFunction_USoundVisComponent_GetCurrentPlayBackTime());
				OuterClass->LinkChild(Z_Construct_UFunction_USoundVisComponent_HandleFrequencySpectrumCalculation());
				OuterClass->LinkChild(Z_Construct_UFunction_USoundVisComponent_IsPlayerPaused());
				OuterClass->LinkChild(Z_Construct_UFunction_USoundVisComponent_IsPlayerPlaying());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowErrorDebug, USoundVisComponent, bool);
				UProperty* NewProp_bShowErrorDebug = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowErrorDebug"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowErrorDebug, USoundVisComponent), 0x0010000000010015, CPP_BOOL_PROPERTY_BITMASK(bShowErrorDebug, USoundVisComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowWarningDebug, USoundVisComponent, bool);
				UProperty* NewProp_bShowWarningDebug = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowWarningDebug"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowWarningDebug, USoundVisComponent), 0x0010000000010015, CPP_BOOL_PROPERTY_BITMASK(bShowWarningDebug, USoundVisComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShowLogDebug, USoundVisComponent, bool);
				UProperty* NewProp_bShowLogDebug = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShowLogDebug"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShowLogDebug, USoundVisComponent), 0x0010000000010015, CPP_BOOL_PROPERTY_BITMASK(bShowLogDebug, USoundVisComponent), sizeof(bool), true);
				UProperty* NewProp_OnFrequencySpectrumCalculated = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnFrequencySpectrumCalculated"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnFrequencySpectrumCalculated, USoundVisComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_eXiSoundVis_FrequencySpectrumCalculated__DelegateSignature());
				UProperty* NewProp_OnFileLoadCompleted = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OnFileLoadCompleted"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(OnFileLoadCompleted, USoundVisComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_eXiSoundVis_FileLoadCompleted__DelegateSignature());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bPauseWhenWindowInBackground, USoundVisComponent, bool);
				UProperty* NewProp_bPauseWhenWindowInBackground = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bPauseWhenWindowInBackground"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bPauseWhenWindowInBackground, USoundVisComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bPauseWhenWindowInBackground, USoundVisComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSoundPausedByBackgroundWindow, USoundVisComponent, bool);
				UProperty* NewProp_bSoundPausedByBackgroundWindow = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSoundPausedByBackgroundWindow"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSoundPausedByBackgroundWindow, USoundVisComponent), 0x0010000000000014, CPP_BOOL_PROPERTY_BITMASK(bSoundPausedByBackgroundWindow, USoundVisComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSoundPaused, USoundVisComponent, bool);
				UProperty* NewProp_bSoundPaused = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSoundPaused"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSoundPaused, USoundVisComponent), 0x0010000000000014, CPP_BOOL_PROPERTY_BITMASK(bSoundPaused, USoundVisComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSoundPlaying, USoundVisComponent, bool);
				UProperty* NewProp_bSoundPlaying = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSoundPlaying"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSoundPlaying, USoundVisComponent), 0x0010000000000014, CPP_BOOL_PROPERTY_BITMASK(bSoundPlaying, USoundVisComponent), sizeof(bool), true);
				UProperty* NewProp_SoundPlayerTimer = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SoundPlayerTimer"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SoundPlayerTimer, USoundVisComponent), 0x0010000000000014, Z_Construct_UScriptStruct_FTimerHandle());
				UProperty* NewProp_AudioComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AudioComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AudioComponent, USoundVisComponent), 0x001000000008001c, Z_Construct_UClass_UAudioComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USoundVisComponent_BP_CalculateFrequencySpectrum(), "BP_CalculateFrequencySpectrum"); // 345689031
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USoundVisComponent_BP_GetAverageBassValue(), "BP_GetAverageBassValue"); // 2374056252
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USoundVisComponent_BP_GetAverageFrequencyValueInRange(), "BP_GetAverageFrequencyValueInRange"); // 1709080680
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USoundVisComponent_BP_GetAverageSubBassValue(), "BP_GetAverageSubBassValue"); // 3799571521
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USoundVisComponent_BP_GetSpecificFrequencyValue(), "BP_GetSpecificFrequencyValue"); // 3829981518
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USoundVisComponent_BP_LoadAllSoundFileNamesFromHD(), "BP_LoadAllSoundFileNamesFromHD"); // 2163503883
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USoundVisComponent_BP_LoadSoundFileFromHD(), "BP_LoadSoundFileFromHD"); // 87499306
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USoundVisComponent_BP_PauseCalculatingFrequencySpectrum(), "BP_PauseCalculatingFrequencySpectrum"); // 4005894504
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USoundVisComponent_BP_ResumeCalculatingFrequencySpectrum(), "BP_ResumeCalculatingFrequencySpectrum"); // 1008832890
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USoundVisComponent_BP_StartCalculatingFrequencySpectrum(), "BP_StartCalculatingFrequencySpectrum"); // 932610000
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USoundVisComponent_BP_StopCalculatingFrequencySpectrum(), "BP_StopCalculatingFrequencySpectrum"); // 3469640398
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USoundVisComponent_GetCurrentPlayBackTime(), "GetCurrentPlayBackTime"); // 4117114005
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USoundVisComponent_HandleFrequencySpectrumCalculation(), "HandleFrequencySpectrumCalculation"); // 553538743
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USoundVisComponent_IsPlayerPaused(), "IsPlayerPaused"); // 209039546
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USoundVisComponent_IsPlayerPlaying(), "IsPlayerPlaying"); // 2326255550
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Custom"));
				MetaData->SetValue(OuterClass, TEXT("DisplayName"), TEXT("SoundVisComponent"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SoundVisComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("OnlyDefaultConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_bShowErrorDebug, TEXT("Category"), TEXT("SoundVis | Debugging"));
				MetaData->SetValue(NewProp_bShowErrorDebug, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
				MetaData->SetValue(NewProp_bShowWarningDebug, TEXT("Category"), TEXT("SoundVis | Debugging"));
				MetaData->SetValue(NewProp_bShowWarningDebug, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
				MetaData->SetValue(NewProp_bShowLogDebug, TEXT("Category"), TEXT("SoundVis | Debugging"));
				MetaData->SetValue(NewProp_bShowLogDebug, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
				MetaData->SetValue(NewProp_bShowLogDebug, TEXT("ToolTip"), TEXT("Debug"));
				MetaData->SetValue(NewProp_OnFrequencySpectrumCalculated, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
				MetaData->SetValue(NewProp_OnFrequencySpectrumCalculated, TEXT("ToolTip"), TEXT("Blueprint Delegate that gets Broadcasted each time the Frequency Spectrum is calculated"));
				MetaData->SetValue(NewProp_OnFileLoadCompleted, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
				MetaData->SetValue(NewProp_OnFileLoadCompleted, TEXT("ToolTip"), TEXT("Blueprint Delegate that gets Broadcasted when the File is loaded completely"));
				MetaData->SetValue(NewProp_bPauseWhenWindowInBackground, TEXT("Category"), TEXT("SoundVis | Sound Player"));
				MetaData->SetValue(NewProp_bPauseWhenWindowInBackground, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
				MetaData->SetValue(NewProp_bSoundPausedByBackgroundWindow, TEXT("Category"), TEXT("SoundVis | Sound Player"));
				MetaData->SetValue(NewProp_bSoundPausedByBackgroundWindow, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
				MetaData->SetValue(NewProp_bSoundPaused, TEXT("Category"), TEXT("SoundVis | Sound Player"));
				MetaData->SetValue(NewProp_bSoundPaused, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
				MetaData->SetValue(NewProp_bSoundPlaying, TEXT("Category"), TEXT("SoundVis | Sound Player"));
				MetaData->SetValue(NewProp_bSoundPlaying, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
				MetaData->SetValue(NewProp_SoundPlayerTimer, TEXT("Category"), TEXT("SoundVis | Frequency Spectrum"));
				MetaData->SetValue(NewProp_SoundPlayerTimer, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
				MetaData->SetValue(NewProp_SoundPlayerTimer, TEXT("ToolTip"), TEXT("TimerHandle for the SoundPlayer, that only exists to check how long a Sound is running"));
				MetaData->SetValue(NewProp_AudioComponent, TEXT("Category"), TEXT("SoundVis | Sound Player"));
				MetaData->SetValue(NewProp_AudioComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_AudioComponent, TEXT("ModuleRelativePath"), TEXT("Public/SoundVisComponent.h"));
				MetaData->SetValue(NewProp_AudioComponent, TEXT("ToolTip"), TEXT("Audio Component to Play our Audio with"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USoundVisComponent(Z_Construct_UClass_USoundVisComponent, &USoundVisComponent::StaticClass, TEXT("USoundVisComponent"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USoundVisComponent);
	UPackage* Z_Construct_UPackage__Script_eXiSoundVis()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/eXiSoundVis")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x14715DD1;
			Guid.B = 0xD4AF074F;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

			Z_Construct_UDelegateFunction_eXiSoundVis_FileLoadCompleted__DelegateSignature();
			Z_Construct_UDelegateFunction_eXiSoundVis_WorkerFinished__DelegateSignature();
			Z_Construct_UDelegateFunction_eXiSoundVis_FrequencySpectrumCalculated__DelegateSignature();
		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
